@includeNamed{'ceylon-common.templ'}

@declare{'genClassMembers'}

	@foreach{method:instanceMethods}
		@if{method.cacheReturn}
			@code{cachedType=genJavaInterropTypeDecl(method.returnType)}
			@if{method.returnType.kind == CLASS_PRIMITIVE}
				@if{method.returnType.name == 'boolean'}
					@code{cachedType='java.lang.Boolean'}
				@else{method.returnType.name == 'byte'}
					@code{cachedType='java.lang.Byte'}
				@else{method.returnType.name == 'short' || method.returnType.name == 'int' || method.returnType.name == 'long'}
					@code{cachedType='java.lang.Long'}
				@else{method.returnType.name == 'float' || method.returnType.name == 'double'}
					@code{cachedType='java.lang.Double'}
				@else{method.returnType.name == 'char'}
					@code{cachedType='java.lang.Character'}
				@end{}
			@end{}
@{indent}@Ignore private @{cachedType} cached_@{method.name};\n
		@end{}
	@end{}

	@if{type.params.size() > 0}
@{indent}@Ignore private final TypeDescriptor $TypeDescriptor$;\n
	@else{}
@{indent}@Ignore public static final TypeDescriptor $TypeDescriptor$ = new io.vertx.lang.ceylon.VertxTypeDescriptor(TypeDescriptor.klass(@{type.simpleName}.class), @{type.name}.class, TO_JAVA, TO_CEYLON);\n
	@end{}
	@foreach{typeParam:type.params}
@{indent}@Ignore private final TypeDescriptor @{'$reified$' + typeParam.name};\n
	@end{}

	@{indent}@Ignore private final @{type.name} delegate;\n
\n
@{indent}public @{ctor}(@foreach{typeParam:type.params}@Ignore TypeDescriptor @{'$reified$' + typeParam.name}, @end{}@{type.name} delegate) {\n
@if{concreteSuperType != null}
@{indent}  super(@if{concreteSuperType.parameterized}
@foreach{typeArg:concreteSuperType.args}
@if{typeArg instanceof io.vertx.codegen.type.ClassTypeInfo}
TypeDescriptor.klass(@{typeArg.name}.class)
@else{}
null /* Not implememented */
@end{}, @end{}
@end{}delegate);\n
@end{}
@if{type.params.size() > 0}
@{indent}  this.$TypeDescriptor$ = TypeDescriptor.klass(@{type.simpleName}.class@foreach{typeParam:type.params}, @{'$reified$' + typeParam.name}@end{});\n
@end{}
@foreach{typeParam:type.params}
@{indent}  this.@{'$reified$' + typeParam.name} = @{'$reified$' + typeParam.name};\n
@end{}
@{indent}  this.delegate = delegate;\n
@{indent}}\n
\n
@{indent}@Ignore \n
@{indent}public TypeDescriptor $getType$() {\n
@{indent}  return $TypeDescriptor$;\n
@{indent}}\n
\n
@{indent}@Ignore\n
@{indent}public Object getDelegate() {\n
@{indent}  return delegate;\n
@{indent}}\n

@foreach{method:instanceMethods}\n
	@if{method.name == 'toString' && method.params.empty}
  public java.lang.String toString() {\n
    return delegate.toString();\n
  }\n
	@else{}
		@includeNamed{'genMethodDecl'} {\n
		@includeNamed{'genMethodBody'}
		@{indent}}\n
	@end{}
@end{}

@end{}

@comment{"Generate the imports"}
package @{type.translatePackageName(TRANSLATOR_COMPOSITE)};\n

\n
@includeNamed{'genImports'}

\n
@if{typeParams.size() > 0}
@includeNamed{'genTypeParamsDesc';params=typeParams;indent=''}
@end{}
@Ceylon(major = 8)\n
@if{doc != null}
@DocAnnotation$annotation$(description = "@{genDoc(doc)}")\n
@end{}
public @if{concrete}class@else{}interface@end{} @{type.simpleName}@includeNamed{'genTypeParams';params=typeParams}
@if{concreteSuperType != null} extends @{genJavaInterropTypeDecl(concreteSuperType, '.')}@end{}
@if{concrete} implements ReifiedType@end{}
@if{abstractSuperTypes.size() > 0}
	@if{concrete}@if{abstractSuperTypes.size() > 0}, @end{}@else{} extends@end{}
	@foreach{abstractSuperType:abstractSuperTypes}
	 @{genJavaInterropTypeDecl(abstractSuperType)}
	@end{', '}
@end{} {\n

\n
  @Ignore\n
  @if{concrete}public static final @end{}io.vertx.lang.ceylon.ConverterFactory<@{type.name}, @{type.simpleName}> TO_CEYLON = new io.vertx.lang.ceylon.ConverterFactory<@{type.name}, @{type.simpleName}>() {\n
    public io.vertx.lang.ceylon.Converter<@{type.name}, @{type.simpleName}> converter(final TypeDescriptor... descriptors) {\n
      return new io.vertx.lang.ceylon.Converter<@{type.name}, @{type.simpleName}>() {\n
        public @{type.simpleName} convert(@{type.name} src) {\n
          return new @{type.simpleName}@if{!concrete}.Impl@end{}@code{index=0}(@foreach{typeParam : type.params}descriptors[@{(index++)}], @end{}src);\n
        }\n
      };\n
    }\n
  };\n

\n
  @Ignore\n
  @if{concrete}public static final @end{}io.vertx.lang.ceylon.Converter<@{type.simpleName}, @{type.name}> TO_JAVA = new io.vertx.lang.ceylon.Converter<@{type.simpleName}, @{type.name}>() {\n
    public @{type.name} convert(@{type.simpleName} src) {\n
@if{concrete}
      return src.delegate;\n
@else{}
      return (@{type.name})src.getDelegate();\n
@end{}
    }\n
  };\n

\n

@if{concrete}

	@includeNamed{'genClassMembers';indent='  ';ctor=type.simpleName}

@else{}

	  @Ignore\n
	  TypeDescriptor $TypeDescriptor$ = TypeDescriptor.klass(@{type.simpleName}.class);\n

	  @Ignore\n
	  Object getDelegate();\n

	@foreach{method:instanceMethods}
		\n
		@includeNamed{'genMethodDecl'};\n
	@end{}

	\n  @Ignore\n
	  public class Impl@includeNamed{'genTypeParams';params=typeParams} implements @{type.simpleName}@includeNamed{'genTypeParams';params=typeParams} {\n
	@includeNamed{'genClassMembers';indent='    ';ctor='Impl'}
	  }\n

@end{}

\n
}\n
