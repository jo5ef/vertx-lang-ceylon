@includeNamed{'/vertx-java/template/common-lib.templ'}

@code{

  def isInteger(type) {
    return type.name == 'java.lang.Long' || type.name == 'java.lang.Integer' || type.name == 'java.lang.Short' || type.name == 'long' || type.name == 'int' || type.name == 'short';
  }

  def isFloat(type) {
    return type.name == 'java.lang.Float' || type.name == 'java.lang.Double' || type.name == 'float' || type.name == 'double';
  }

  def isBoolean(type) {
    return type.name == 'java.lang.Boolean' || type.name == 'boolean';
  }

  def isCeylonKeyword(identifier) {
    return identifier == 'abstracts'
      || identifier == 'abstracts'
      || identifier == 'alias'
      || identifier == 'assembly'
      || identifier == 'assert'
      || identifier == 'assign'
      || identifier == 'break'
      || identifier == 'case'
      || identifier == 'catch'
      || identifier == 'class'
      || identifier == 'continue'
      || identifier == 'dynamic'
      || identifier == 'else'
      || identifier == 'exists'
      || identifier == 'extends'
      || identifier == 'finally'
      || identifier == 'for'
      || identifier == 'function'
      || identifier == 'given'
      || identifier == 'if'
      || identifier == 'import'
      || identifier == 'in'
      || identifier == 'interface'
      || identifier == 'is'
      || identifier == 'let'
      || identifier == 'module'
      || identifier == 'new'
      || identifier == 'nonempty'
      || identifier == 'object'
      || identifier == 'of'
      || identifier == 'out'
      || identifier == 'outer'
      || identifier == 'package'
      || identifier == 'return'
      || identifier == 'satisfies'
      || identifier == 'super'
      || identifier == 'switch'
      || identifier == 'then'
      || identifier == 'this'
      || identifier == 'throw'
      || identifier == 'try'
      || identifier == 'value'
      || identifier == 'void'
      || identifier == 'void'
      || identifier == 'while';
  }

  def toCeylonIdentifier(s) {
    if (isCeylonKeyword(s)) {
      s = '\\i' + s;
    }
    return s;
  }

  def genConvParam(type, expr) {
    var kind = type.kind;
    if (kind.basic) {
      var sname = type.simpleName;
      if (kind == CLASS_PRIMITIVE) {
        if (sname == 'int' || sname == 'short' || sname == 'float' || sname == 'char') {
          return '(' + sname + ')' + expr;
        }
        return expr;
      } else {
       return genParamConverter(type) + '.safeConvert(' + expr + ')';
      }
    } else if (kind.json) {
       return genParamConverter(type) + '.safeConvert(' + expr + ')';
    } else if (kind == CLASS_HANDLER) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      if (eventKind == CLASS_ASYNC_RESULT) {
        var resultType = eventType.args[0];
        var resultKind = resultType.kind;
        var adapterType = resultType.erased;
        return expr + ' == null ? null : new io.vertx.lang.ceylon.CallableAsyncResultHandler<' + adapterType.name + '>(' + expr + ') {\n' +
        '      public Object toCeylon(' + adapterType.name + ' event) {\n' +
        '        return ' + genConvReturn(resultType, 'event') + ';\n' +
        '      }\n' +
        '    }';
      } else if (eventKind == CLASS_VOID) {
        /* Special case */
        return expr + ' == null ? null : new ' + type.erased.name + '() {\n' +
        '      public void handle(' + type.erased.args[0].name + ' event) {\n' +
        '        ' + expr + '.$call$();\n' +
        '      }\n' +
        '    }';
      } else {
        return expr + ' == null ? null : new ' + type.erased.name + '() {\n' +
        '      public void handle(' + type.erased.args[0].name + ' event) {\n' +
        '        ' + expr + '.$call$((Object)' + genConvReturn(type.args[0], 'event') + ');\n' +
        '      }\n' +
        '    }';
      }
    } else if (kind == CLASS_FUNCTION) {
      var eventType = type.args[0];
      var eventKind = eventType.kind;
      var returnClass = genJavaInterropTypeDecl(type.erased.args[1]);
      if (eventKind == CLASS_VOID) {
        /* Special case */
        return expr + ' == null ? null : new ' + type.erased.name + '() {\n' +
        '      public ' + type.erased.args[1].name + ' apply(' + type.erased.args[0].name + ' arg) {\n' +
        '        ' + returnClass + ' ret = (' + returnClass + ')' + expr + '.$call$();\n' +
        '        return ' + genConvParam(type.args[1], 'ret') + ';\n' +
        '      }\n' +
        '    }';
      } else {
        return expr + ' == null ? null : new ' + type.erased.name + '() {\n' +
        '      public ' + type.erased.args[1].name + ' apply(' + type.erased.args[0].name + ' arg) {\n' +
        '        ' + returnClass + ' ret = (' + returnClass + ')' + expr + '.$call$((Object)' + genConvReturn(type.args[0], 'arg') + ');\n' +
        '        return ' + genConvParam(type.args[1], 'ret') + ';\n' +
        '      }\n' +
        '    }';
      }
    } else if (kind == CLASS_API) {
      return type.raw.translateName(TRANSLATOR_COMPOSITE) + '.TO_JAVA.safeConvert(' + expr + ')';
    } else if (kind == CLASS_OBJECT) {
      if (type.variable) {
        if (type.classParam) {
          return '(' + type.name + ')io.vertx.lang.ceylon.VertxTypeDescriptor.getToJava($reified$' + type.name + ').convert(' + expr + ')';
        } else {
          var classTypeParam = method.resolveClassTypeParam(type);
          if (classTypeParam != null) {
            return 'io.vertx.lang.ceylon.VertxTypeDescriptor.getToJava($reified$' + classTypeParam.type.args[0].name + ').convert(' + expr + ')';
          }
        }
      }
      return 'io.vertx.lang.ceylon.ToJava.object(' + expr + ')';
    } else if (kind == CLASS_DATA_OBJECT) {
      return expr + ' == null ? null : new ' + type.name + '(io.vertx.lang.ceylon.ToJava.JsonObject.convert(' + expr + '.toJson()))';
    } else if (kind == CLASS_ENUM) {
      return genParamConverter(type) + '.safeConvert(' + expr + ')';
    } else if (kind == CLASS_LIST || kind == CLASS_SET) {
      var eltType = type.args[0];
      var collection = kind == CLASS_LIST ? 'io.vertx.lang.ceylon.ToJava.convertList' : 'io.vertx.lang.ceylon.ToJava.convertSet';
      var eltConverter = genParamConverter(eltType);
      if (eltConverter != null) {
        return collection + (eltType.nullable ? 'OfNullable' : '') + '(' + expr + ', ' + eltConverter + ')';
      }
    } else if (kind == CLASS_MAP) {
      var valConverter = genParamConverter(type.args[1]);
      if (valConverter != null) {
        return 'io.vertx.lang.ceylon.ToJava.convertMap' + '(' + expr + ', io.vertx.lang.ceylon.ToJava.String, ' + valConverter + ')';
      }
    } else if (kind == CLASS_THROWABLE) {
      return expr;
    } else if (kind == CLASS_CLASS_TYPE) {
      return 'io.vertx.lang.ceylon.VertxTypeDescriptor.getClass($reified$' + type.args[0].name + ')';
    }
    return 'null';
  }

  def genParamConverter(type) {
    var kind = type.kind;
    if (kind.basic || kind.json) {
      return 'io.vertx.lang.ceylon.ToJava.' + type.simpleName;
    } else if (kind == CLASS_API) {
      return type.translateName(TRANSLATOR_COMPOSITE) + '.TO_JAVA';
    } else if (kind == CLASS_DATA_OBJECT) {
      return type.translatePackageName(TRANSLATOR_COMPOSITE) + '.' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.get_().getToJava()';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        return type.translatePackageName(TRANSLATOR_COMPOSITE) + '.' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.get_().getToJava()';
      } else {
        return 'io.vertx.lang.ceylon.ToJava.enumeration(' + type.name + '.class)';
      }
    } else if (kind == CLASS_OBJECT) {
      return "io.vertx.lang.ceylon.ToJava.Object";
    }
    return null;
  }

  def genTypeDescriptor(type) {
    if (type.variable) {
      if (type.methodParam) {
        return 'io.vertx.lang.ceylon.VertxTypeDescriptor.nullable($reified$' + type.name + ')';
      } else {
        return '$reified$' + type.name;
      }
    } else if (type.kind == CLASS_API || type.kind.basic || type.kind.json) {
      return genJavaInterropTypeDecl(typeArg) + '.$TypeDescriptor$';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return 'new io.vertx.lang.ceylon.VertxTypeDescriptor(' + genJavaInterropTypeDecl(typeArg) + '.$TypeDescriptor$' +
             ', ' + typeArg.name + '.class' +
             ', ' + genParamConverter(type) +
             ', ' + genReturnConverter(type) + ')';
    } else if (type.kind == CLASS_ENUM) {
      var desc = type.gen ? (type.translatePackageName(TRANSLATOR_COMPOSITE) + '.' + type.simpleName) : 'ceylon.language.String';
      return 'new io.vertx.lang.ceylon.VertxTypeDescriptor(' + desc + '.$TypeDescriptor$' +
             ', ' + typeArg.name + '.class' +
             ', ' + genParamConverter(type) +
             ', ' + genReturnConverter(type) + ')';
    } else {
      return 'null /* unsupported yet ' + type.name + '/' + type.kind + '  */ ';
    }
  }

  /*
   * Returns the Ceylon expression that converts a Java object to a Ceylon object.
   * @param type the type of the Java object
   * @param expr the expression that evaluates to the Java object
   */
  def genConvReturn(type, expr) {
    if (type.name.equals("void")) {
      return expr;
    } else {
      var kind = type.kind;
      if (kind.basic || kind == CLASS_THROWABLE || kind.json) {
        if (kind == CLASS_BOXED_PRIMITIVE || kind == CLASS_STRING || kind.json) {
          return 'io.vertx.lang.ceylon.ToCeylon.' + type.simpleName + '.safeConvert(' + expr + ')';
        }
        return expr;
      } else if (kind == CLASS_DATA_OBJECT) {
        return genReturnConverter(type) + '.safeConvert(' + expr + ')';
      } else if (kind == CLASS_LIST || kind == CLASS_SET) {
        var eltType = type.args[0];
        var collection = kind == CLASS_LIST ? 'io.vertx.lang.ceylon.ToCeylon.convertList' : 'io.vertx.lang.ceylon.ToCeylon.convertSet';
        return collection + (eltType.nullable ? 'OfNullable' : '') + '(' + genJavaClassName(eltType, '.') + '.$TypeDescriptor$, ' + expr + ', ' + genReturnConverter(eltType) + ')';
      } else if (kind == CLASS_MAP) {
        var valType =  type.args[1];
        return 'io.vertx.lang.ceylon.ToCeylon.convertMap' + (valType.nullable ? 'OfNullable(' : '(') +
          'ceylon.language.String.$TypeDescriptor$, ' +
          genJavaClassName(valType, '.') + '.$TypeDescriptor$, ' +
          expr + ', ' + 'io.vertx.lang.ceylon.ToCeylon.String, ' + genReturnConverter(valType) + ')';
      } else if (kind == CLASS_API) {
        var ret = new java.lang.StringBuilder(type.raw.translateName(TRANSLATOR_COMPOSITE));
        ret.append('.TO_CEYLON.converter(');
        if (type.parameterized) {
          var index = 0;
          for (typeArg : type.args) {
            if (index > 0) {
              ret.append(', ');
            }
            ret.append(genTypeDescriptor(typeArg));
            index = index + 1;
          }
        }
        ret.append(').safeConvert(');
        ret.append(expr);
        ret.append(')');
        return ret.toString();;
      } else if (kind.json) {
      } else if (kind == CLASS_OBJECT) {
        if (type.variable) {
          if (type.classParam) {
            return '(' + type.name + ')io.vertx.lang.ceylon.VertxTypeDescriptor.getToCeylon($reified$' + type.name + ').convert(' + expr + ')';
          }
          if (method != null) {
            /* work around for failure */
            var reflect = method.getClass().getMethod("resolveClassTypeParam", type.getClass());
            var classTypeParam = reflect.invoke(method, type);
            if (classTypeParam != null) {
              return '(' + type.name + ')io.vertx.lang.ceylon.VertxTypeDescriptor.getToCeylon($reified$' + classTypeParam.type.args[0].name + ').convert(' + expr + ')';
            }
          }
        }
        return 'io.vertx.lang.ceylon.ToCeylon.object(' + expr + ')';
      } else if (kind == CLASS_ENUM) {
        return genReturnConverter(type) + '.safeConvert(' + expr + ')';
      } else if (kind == CLASS_HANDLER) {
        var handlerType = type.args[0];
        if (handlerType.kind == CLASS_ASYNC_RESULT) {
          return 'new io.vertx.lang.ceylon.AsyncResultHandlerCallable(' + genParamConverter(handlerType.args[0]) + ', ' + expr + ')';
        } else {
          return 'new io.vertx.lang.ceylon.HandlerCallable(' + genParamConverter(handlerType) + ', ' + expr + ')';
        }
      }
    }
    return 'null';
  }

  def genReturnConverter(type) {
    var kind = type.kind;
    if (kind.basic || kind.json) {
      return 'io.vertx.lang.ceylon.ToCeylon.' + type.simpleName;
    } else if (kind == CLASS_DATA_OBJECT) {
      return type.translatePackageName(TRANSLATOR_COMPOSITE) + '.' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.get_().getToCeylon()';
    } else if (kind == CLASS_API) {
      return type.translateName(TRANSLATOR_COMPOSITE) + '.TO_CEYLON.converter()';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        return type.translatePackageName(TRANSLATOR_COMPOSITE) + '.' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.get_().getToCeylon()';
      } else {
        return 'io.vertx.lang.ceylon.ToCeylon.<' + type.name + '>enumeration()';
      }
    }
    return null;
  }

  /*
   * Generate Java type declaration for Ceylon interrop.
   */
  def genJavaInterropTypeDecl(type) {
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = type.simpleName;
      if (type.parameterized) {
        decl = genJavaInterropTypeDecl(type.raw);
        var sep = '<';
        for (typeArg : type.args) {
          decl += sep + genJavaInterropTypeDecl(typeArg);
          sep = ',';
        }
        decl += '>';
      }
    } else if (kind == CLASS_STRING) {
      decl = 'ceylon.language.String';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        decl = type.translateName(TRANSLATOR_COMPOSITE);
      } else {
        decl = 'ceylon.language.String';
      }
    } else if (kind == CLASS_BOXED_PRIMITIVE) {
      var name = type.name;
      if (name == 'java.lang.Long' || name == 'java.lang.Integer' || name == 'java.lang.Short') {
        decl = 'ceylon.language.Integer';
      } else if (name == 'java.lang.Float' || name == 'java.lang.Double') {
        decl = 'ceylon.language.Float';
      } else if (name == 'java.lang.Boolean') {
        decl = 'ceylon.language.Boolean';
      } else if (name == 'java.lang.Character') {
        decl = 'ceylon.language.Character';
      } else if (name == 'java.lang.Byte') {
        decl = 'ceylon.language.Byte';
      }
    } else if (kind == CLASS_PRIMITIVE) {
      var name = type.name;
      if (name == 'long' || name == 'int' || name == 'short') {
        decl = 'long';
      } else if (name == 'float' || name == 'double') {
        decl = 'double';
      } else if (name == 'boolean') {
        decl = 'boolean';
      } else if (name == 'char') {
        decl = 'int';
      } else if (name == 'byte') {
        decl = 'byte';
      }
    } else if (kind == CLASS_OBJECT) {
      if (type.variable) {
        decl = type.name;
      } else {
        decl = 'Object';
      }
    } else if (kind == CLASS_HANDLER) {
      decl = 'Callable<?>';
    } else if (kind == CLASS_FUNCTION) {
      decl = 'Callable<?>';
    } else if (kind == CLASS_THROWABLE) {
      decl = 'Throwable';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = type.translatePackageName(TRANSLATOR_COMPOSITE) + "." + type.simpleName;
    } else if (kind == CLASS_VOID) {
      decl = 'Anything';
    } else if (kind == CLASS_LIST) {
      decl = 'ceylon.language.List<' + genJavaInterropTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_SET) {
      if (type.args[0].nullable) {
        decl = 'ceylon.language.Collection<' + genJavaInterropTypeDecl(type.args[0]) + '>';
      } else {
        decl = 'ceylon.language.Set<' + genJavaInterropTypeDecl(type.args[0]) + '>';
      }
    } else if (kind == CLASS_MAP) {
      decl = 'ceylon.language.Map<' + genJavaInterropTypeDecl(type.args[0]) + ',' + genJavaInterropTypeDecl(type.args[1]) + '>';
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = 'ceylon.json.Object';
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = 'ceylon.json.Array';
    } else if (kind == CLASS_OTHER) {
      if (type.void) {
        decl = 'void';
      }
    }
    return decl;
  }

  def genJavaClassName(type, sep) {
    var kind = type.kind;
    if (kind == CLASS_STRING) {
      return 'ceylon.language' + sep + 'String';
    } else if (kind == CLASS_API) {
      return type.raw.translatePackageName(TRANSLATOR_COMPOSITE) + sep + type.simpleName;
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        return type.translatePackageName(TRANSLATOR_COMPOSITE) + sep + type.simpleName;
      } else {
        return 'ceylon.language' + sep + 'String';
      }
    } else if (kind == CLASS_BOXED_PRIMITIVE) {
      var name = type.name;
      if (name == 'java.lang.Long' || name == 'java.lang.Integer' || name == 'java.lang.Short') {
        return 'ceylon.language' + sep + 'Integer';
      } else if (name == 'java.lang.Float' || name == 'java.lang.Double') {
        return 'ceylon.language' + sep + 'Float';
      } else if (name == 'java.lang.Boolean') {
        return 'ceylon.language' + sep + 'Boolean';
      } else if (name == 'java.lang.Character') {
        return 'ceylon.language' + sep + 'Character';
      } else if (name == 'java.lang.Byte') {
        return 'ceylon.language' + sep + 'Byte';
      }
    } else if (kind == CLASS_PRIMITIVE) {
      var name = type.name;
      if (name == 'long' || name == 'int' || name == 'short') {
        return 'ceylon.language' + sep + 'Integer';
      } else if (name == 'float' || name == 'double') {
        return 'ceylon.language' + sep + 'Float';
      } else if (name == 'boolean') {
        return 'ceylon.language' + sep + 'Boolean';
      } else if (name == 'char') {
        return 'ceylon.language' + sep + 'Character';
      } else if (name == 'byte') {
        return 'ceylon.language' + sep + 'Byte';
      }
    } else if (kind == CLASS_DATA_OBJECT) {
      return type.translatePackageName(TRANSLATOR_COMPOSITE) + sep + type.simpleName;
    } else if (kind == CLASS_JSON_OBJECT) {
      return 'ceylon.json' + sep + 'Object';
    } else if (kind == CLASS_JSON_ARRAY) {
      return 'ceylon.json' + sep + 'Array';
    }
    return 'todo(' + type + ',' + kind + ')';
  }

  /*
   * Generate Ceylon type declaration.
   */
  def genCeylonTypeDecl(type) {
    var nullable = type.nullable;
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = genJavaClassName(type.raw, '::');
      if (type.parameterized) {
        decl = genCeylonTypeDecl(type.raw);
        var sep = '<';
        for (typeArg : type.args) {
          if (typeArg.variable && typeArg.methodParam) {
            decl += sep + typeArg.name + '?';
          } else {
            decl += sep + genCeylonTypeDecl(typeArg);
          }
          sep = ',';
        }
        decl += '>';
      }
    } else if (kind == CLASS_STRING) {
      decl = genJavaClassName(type, '::');
    } else if (kind == CLASS_ENUM) {
      decl = genJavaClassName(type, '::');
    } else if (kind == CLASS_PRIMITIVE || kind == CLASS_BOXED_PRIMITIVE) {
      decl = genJavaClassName(type, '::');
    } else if (kind == CLASS_OBJECT) {
      if (type.variable) {
        nullable = type.methodParam;
        decl = type.name;
      } else {
        nullable = true;
        decl = 'ceylon.language::Object';
      }
    } else if (kind == CLASS_HANDLER || kind == CLASS_FUNCTION) {
      var decl = 'ceylon.language::Anything';
      if (kind == CLASS_FUNCTION) {
        decl = genCeylonTypeDecl(type.args[1]);
      }
      var arg = type.args[0];
      if (arg.kind == CLASS_VOID) {
        decl += '()';
      } else if (arg.kind == CLASS_ASYNC_RESULT) {
        var result = arg.args[0];
        if (result.kind == CLASS_VOID) {
          decl += '(ceylon.language::Throwable?)';
        } else {
          decl += '(ceylon.language::Throwable|' + genCeylonTypeDecl(result) + ')';
        }
      } else {
        decl += '(' + genCeylonTypeDecl(type.args[0]) + ')';
      }
    } else if (kind == CLASS_THROWABLE) {
      decl = 'ceylon.language::Throwable';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = genJavaClassName(type, '::');
    } else if (kind == CLASS_VOID) {
      decl = 'ceylon.language::Anything';
    } else if (kind == CLASS_SET) {
      if (type.args[0].nullable) {
        decl = 'ceylon.language::Collection<' + genCeylonTypeDecl(type.args[0]) + '>';
      } else {
        decl = 'ceylon.language::Set<' + genCeylonTypeDecl(type.args[0]) + '>';
      }
    } else if (kind == CLASS_LIST) {
      decl = 'ceylon.language::List<' + genCeylonTypeDecl(type.args[0]) + '>';
    } else if (kind == CLASS_MAP) {
      decl = 'ceylon.language::Map<' + genCeylonTypeDecl(type.args[0]) + ',' + genCeylonTypeDecl(type.args[1]) + '>';
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = genJavaClassName(type, '::');
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = genJavaClassName(type, '::');
    } else if (kind == CLASS_OTHER) {
      if (type.void) {
        decl = 'ceylon.language::Anything';
      }
    }
    if (nullable) {
      decl += "?";
    }
    return decl;
  }

  def genMethodCall(method, indent) {
    var sb = new java.lang.StringBuilder();
    var args = new java.util.ArrayList();
    var idx = 0;
    for (param : method.params) {
      var arg = 'arg_' + idx;
      sb.append(indent);
      sb.append(param.type.erased);
      sb.append(' ');
      sb.append(arg);
      sb.append(' = ');
      sb.append(genConvParam(param.type, param.name));
      sb.append(';\n');
      idx += 1;
    }
    var expr = new java.lang.StringBuilder();
    if (method.staticMethod) {
      expr.append(type.raw.name);
    } else {
      expr.append('delegate');
    }
    expr.append('.').append(method.name).append('(');
    var paramIdx = 0;
    for (param : method.params) {
      if (paramIdx > 0) {
        expr.append(', ');
      }
      expr.append('arg_' + paramIdx);
      paramIdx += 1;
    }
    expr.append(')');
    sb.append(indent);
    if (method.returnType.name != 'void') {
      sb.append(genJavaInterropTypeDecl(method.returnType)).append(' ret = ');
    }
    sb.append(genConvReturn(method.returnType, expr.toString()));
    sb.append(';\n');
    return sb.toString();
  }

  /**
   * Render a tag link to an html link, this function is used as parameter of the
   * renderDocToHtml function when it needs to render tag links.
   */
  def renderLinkToHtml(link) {
    var uri = null;
    var label = link.label.trim();
    var rawType = link.targetType.raw;
    if (rawType.kind == CLASS_API || rawType.kind == CLASS_DATA_OBJECT || (rawType.kind == CLASS_ENUM && rawType.gen)) {
      var elt = link.targetElement;
      var eltKind = elt.getKind().name();
      if (type.module.name == rawType.module.name) {
        var from = CASE_QUALIFIED.parse(rawType.name.substring(type.module.packageName.length() + 1)).size() - 1;
        var to = CASE_QUALIFIED.parse(rawType.name.substring(rawType.module.packageName.length() + 1));
        if (eltKind == 'METHOD' && elt.modifiers.contains(javax.lang.model.element.Modifier.STATIC)) {
          to.set(to.size() - 1, CASE_CAMEL.to(CASE_LOWER_CAMEL, to.get(to.size() - 1)));
        }
        var uri = new java.lang.StringBuilder();
        while (from-- > 0) {
          uri.append('../');
        }
        for (atom : to) {
          uri.append(atom).append('/');
        }
        uri.length = uri.length() - 1;
        uri.append('.type.html');
        if (eltKind == 'METHOD') {
          uri.append('#').append(elt.getSimpleName());
          if (label.empty) {
            label = elt.getSimpleName().toString();
          }
        } else {
          if (label.empty) {
            label = rawType.simpleName;
          }
        }
        uri = uri.toString();
      } else {
        if (label.empty && eltKind == 'METHOD') {
          label = elt.getSimpleName().toString();
        }
      }
    } else if (rawType.kind == CLASS_HANDLER) {
      return '_handler_';
    } else if (rawType.kind == CLASS_STRING) {
      return '`String`';
    } else if (rawType.kind == CLASS_ASYNC_RESULT) {
      return '_async result_';
    } else if (rawType.kind == CLASS_SET) {
      return '`Set`'
    } else if (rawType.kind == CLASS_LIST) {
      return '`List`'
    } else if (rawType.kind == CLASS_MAP) {
      return '`Map`'
    }
    if (uri != null) {
      return '[' + label + '](' + uri + ')';
    } else if (label.empty) {
      return '`' + rawType.name + '`';
    } else {
      return '`' + label + '`';
    }
  }

  def genDoc(doc) {
    var gen = renderTokensToHtml('', doc.tokens, renderLinkToHtml, new java.lang.StringBuilder().append('\\').append('n').toString());
    gen = gen.replace('\\/', '\\\\/');
    gen = gen.replace('"', '\\"');
    return gen;
  }

  def genMethodName(method) {
    var name = method.name;
    if (method.params.empty && method.returnType.kind != CLASS_VOID && name.startsWith('get') && name.length() > 3 && java.lang.Character.isUpperCase(name.charAt(3))) {
      return '$' + name;
    }
    if (method.params.empty && method.returnType.name == 'boolean' && name.startsWith('is') && name.length() > 2 && java.lang.Character.isUpperCase(name.charAt(2))) {
      return '$' + name;
    }
    if (method.params.size() == 1 && method.returnType.name == 'void' && name.startsWith('set') && name.length() > 3 && java.lang.Character.isUpperCase(name.charAt(3))) {
      return '$' + name;
    }
    return name;
  }
}

@declare{'genMethodBody'}
	@if{method.cacheReturn}
@{indent}  if (cached_@{method.name} != null) {\n
@{indent}    return cached_@{method.name};\n
@{indent}  }\n
	@end{}
	@{genMethodCall(method, '    ')}
	@if{method.returnType.name != 'void'}
		@if{method.fluent}
@{indent}  return this;\n
		@else{}
			@if{method.cacheReturn}
@{indent}  cached_@{method.name} = ret;\n
			@end{}
@{indent}  return ret;\n
		@end{}
	@end{}
@end{}

@declare{'genMethodDecl'}
@if{method.typeParams.size() > 0}
@includeNamed{'genTypeParamsDesc';params=method.typeParams}
@end{}
@code{
  var methodParams = new java.util.ArrayList();
  for (methodParam : method.params) {
    if (methodParam.type.kind != CLASS_CLASS_TYPE) {
      methodParams.add(methodParam);
    }
  }
}
@if{method.doc != null}
  @DocAnnotation$annotation$(description = "@{genDoc(method.doc)}")\n
@end{}
  @TypeInfo("@{genCeylonTypeDecl(method.returnType)}")\n
  public @if{method.typeParams.size() > 0}@includeNamed{'genTypeParams';params=method.typeParams} @end{}
@{genJavaInterropTypeDecl(method.returnType)} @{genMethodName(method)}(@foreach{typeParam:method.typeParams}final @Ignore TypeDescriptor @{'$reified$' + typeParam.name}@end{', '}@if{method.typeParams.size() > 0 && methodParams.size() > 0}, @end{}@foreach{param:methodParams}
\n    final @TypeInfo("@{genCeylonTypeDecl(param.type)}") @Name("@{param.name}")@if{param.description != null}@DocAnnotation$annotation$(description = "@{genDoc(param.description)}")@end{} @{genJavaInterropTypeDecl(param.type)} @{param.name}@end{', '})
@end{}

@declare{'genTypeParamsDesc'}
@{indent}@TypeParameters({\n
	@foreach{param:params}
@{indent}  @TypeParameter(value="@{param.name}",variance=Variance.NONE)
	@end{',\n'}
\n@{indent}})\n
@end{}

@declare{'genTypeParams'}
	@if{params.size() > 0}
		<@foreach{param:params}
		@{param.name}
		@end{','}>
	@end{}
@end{}

@declare{'genImports'}
import com.redhat.ceylon.compiler.java.metadata.Ceylon;\n
import com.redhat.ceylon.compiler.java.metadata.TypeInfo;\n
import com.redhat.ceylon.compiler.java.metadata.TypeParameter;\n
import com.redhat.ceylon.compiler.java.metadata.TypeParameters;\n
import com.redhat.ceylon.compiler.java.metadata.Variance;\n
import com.redhat.ceylon.compiler.java.metadata.Ignore;\n
import com.redhat.ceylon.compiler.java.metadata.Name;\n
import com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor;\n
import com.redhat.ceylon.compiler.java.runtime.model.ReifiedType;\n
import ceylon.language.Callable;\n
import ceylon.language.DocAnnotation$annotation$;\n
@foreach{importedType:importedTypes}

	@if{importedType.kind == CLASS_DATA_OBJECT}
	@else{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.translateName(TRANSLATOR_COMPOSITE)};\n
		@end{}
	@else{importedType.kind == CLASS_ENUM && importedType.gen}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.translateName(TRANSLATOR_COMPOSITE)};\n
			@foreach{value:importedType.values}
			import @{importedType.translateName(TRANSLATOR_COMPOSITE)};\n
			@end{}
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
			import @{importedType};\n
		@end{}
	@end{}
@end{}
@end{}
